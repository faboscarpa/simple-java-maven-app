stage('SonarQube analysis') {
      steps {
        environment {
          scannerHome = tool 'sonarTool'
        }

        withSonarQubeEnv('sonar') {
          sh 'mvn sonar:sonar'
        }

      }
    }
    stage('SonarQube Gatekeeper') {
      steps {
        timeout(time: 5, unit: 'MINUTES') {
          script {
            def qualitygate = waitForQualityGate()
            if (qualitygate.status != "OK") {
              error "Pipeline aborted due to quality gate coverage failure: ${qualitygate.status}"
            }
          }

        }

      }
    }
    stage('Deploy') {
      parallel {
        stage('Deploy Stage') {
          when {
            branch 'stage'
          }
          steps {
            sh './jenkins/scripts/deliver.sh'
          }
        }
        stage('Deploy Prod') {
          when {
            branch 'master'
          }
          steps {
            input(message: 'Deploy to Prod?', id: 'deploy_prod', ok: 'OK')
          }
        }
      }
    }